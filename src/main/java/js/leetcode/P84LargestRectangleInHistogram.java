
package js.leetcode;

import static js.base.Tools.*;

import java.util.Random;

public class P84LargestRectangleInHistogram {

  public static void main(String[] args) {
    new P84LargestRectangleInHistogram().run();
  }

  private void run() {
    if (false) {
      withDump = true;
      x(5, 5);
      return;
    }

    if (false) {
      for (int i = 0; i < 100; i++) {
        rand();
      }
      return;
    }

    withDump = false;

    x(3, 2, 1, 2);
    x(10, 2, 1, 5, 6, 2, 3);
    x(4, 2, 4);
    x(9, 9, 0);
    x(9, 5, 4, 3, 2, 1);
    x(9, 1, 2, 3, 4, 5);
    x(9, 1, 2, 3, 4, 5, 1, 2, 3);
    x(8, 0, 0, 0, 4, 5, 1, 1, 1, 0, 0, 1, 0);
    x(28, 0, 7, 9, 0, 6, 9, 7, 8, 4, 6, 4);
    x(30, 0, 1, 8, 2, 9, 4, 9, 1, 5, 2, 7, 4, 1, 6, 6, 7, 6, 9, 1, 2, 5);
    x(30, 3, 8, 7, 5, 1, 6, 2, 7, 2, 8, 2, 0, 2, 2, 9, 6, 2, 8, 5, 9, 2, 3, 9, 3, 3, 3, 9, 1, 2, 3, 4, 0, 5,
        7);
    x(20, 4, 4, 6, 5, 4, 1, 2);
    x(16, 6, 8, 1, 3, 7, 4, 0, 1, 8, 8, 2, 1, 9, 4);
    x(21, 5, 4, 0, 4, 8, 9, 0, 4, 0, 2, 8, 1, 5, 2, 1, 8, 7, 9, 2, 4, 3, 1, 8, 4);
    x(35, 0, 1, 2, 8, 1, 1, 3, 0, 4, 0, 2, 7, 8, 8, 2, 9, 3, 5, 8, 1, 8, 0, 9, 7, 5, 5, 9, 9, 7, 1, 1, 3, 8,
        3, 9, 6);
    x(30, 8, 5, 9, 7, 3, 6, 3, 3, 6, 6);
    x(24, 3, 0, 6, 6, 7, 8, 1, 4, 3, 9, 1, 8, 5, 0, 6, 3, 3);
    x(22, 1, 5, 3, 7, 0, 3, 3, 7, 4, 4, 7, 9, 2, 8, 4, 1, 8, 6, 5, 5, 1, 8, 7, 8, 1, 4, 4);
    x(9, 6, 3, 4);
    x(15, 5, 8, 3, 0, 3, 3, 6, 4, 0, 6, 5, 5, 2);
    x(24, 7, 1, 8, 8, 6, 3, 5, 7, 7, 1, 2, 8, 2, 6, 9, 4, 4, 5, 4, 2);
    x(35, 8, 7, 5, 0, 9, 0, 4, 0, 7, 7, 5, 6, 8, 6, 7, 2, 9, 4, 7, 6, 9, 7, 4, 1, 3, 5, 2, 6, 2);
    x(25, 5, 0, 3, 2, 3, 0, 0, 5, 1, 0, 6, 1, 1, 8, 9, 5, 8, 9, 4, 1);
    x(28, 4, 6, 2, 3, 4, 5, 2, 8, 3, 5, 0, 1, 8, 8, 7, 3, 3, 7, 7, 7, 9, 0, 8, 7, 0, 5, 4, 0, 4, 3);
    x(24, 8, 0, 7, 2, 8, 8, 8, 0, 0, 1, 5, 2, 8, 0, 2, 1, 7, 9, 8, 0, 9, 6, 2, 2, 5, 5, 0, 0, 8, 5, 0, 7, 6,
        2, 0, 6, 8);
    x(12, 6, 4, 4, 1, 0, 3, 0, 2, 0, 4);
    x(28, 1, 1, 5, 5, 3, 5, 3, 8, 6, 2, 5, 0, 8, 6, 4, 8, 7, 6, 5, 3, 0, 5, 6);
    x(30, 0, 7, 4, 6, 4, 2, 3, 1, 5, 8, 1, 9, 4, 4, 2, 6, 2, 5, 8, 8, 6, 7, 7, 0, 2, 7, 2, 8, 1, 1, 8, 5);
    x(9, 2, 1, 9);
    x(16, 3, 7, 8, 3, 0, 0, 1, 5, 4, 7, 9, 0, 1);
    x(34, 6, 4, 0, 7, 2, 0, 4, 1, 8, 4, 4, 8, 4, 2, 7, 9, 8, 3, 9, 4, 8, 3, 3, 5, 9);
    x(35, 7, 8, 7, 8, 5, 7, 6, 4, 0, 8, 9, 6, 1, 0, 6, 7, 4, 2, 1, 0, 4, 4, 7, 4, 4, 8, 0, 6, 5, 9, 7, 8, 4,
        4, 6);
    x(21, 9, 3, 2, 7, 7, 7);
    x(21, 7, 8, 1, 6, 0, 4, 4, 7, 9, 9, 0, 7, 7, 2, 9, 3);
    x(21, 2, 6, 2, 0, 2, 4, 7, 4, 3, 5, 4, 5, 1, 8, 1, 2, 0, 1, 0, 5, 6, 0, 2, 8, 1, 8, 4, 3);
    x(1, 1);
    x(20, 5, 4, 6, 8, 6, 2, 6, 7);
    x(27, 4, 0, 3, 9, 9, 9, 6, 0, 1, 9, 9, 5, 4, 0, 2, 4, 4, 2);
    x(30, 5, 1, 9, 2, 0, 1, 6, 4, 7, 0, 6, 6, 6, 8, 6, 2, 1);
    x(30, 3, 7, 8, 3, 3, 6, 6, 7, 8, 4, 2, 4, 2, 6, 5, 0, 6, 3, 6, 6, 2, 4, 4, 0, 1, 3);
    x(40, 7, 9, 3, 2, 6, 9, 5, 7, 5, 9, 7, 7, 3, 0, 8, 5, 0, 4, 5, 0, 0, 0, 6, 6, 6, 3, 9, 8, 0, 1, 5, 6, 0);
    x(12, 6, 5, 2, 1, 7, 4, 6);
    x(25, 1, 2, 3, 5, 9, 6, 7, 6, 1, 1, 7, 3, 2, 4, 9, 3, 2, 1, 4);
    x(14, 0, 8, 0, 6, 2, 3, 9, 0, 3, 6, 1, 1, 9, 4, 8, 1, 8, 0, 7, 7, 0, 1, 1, 4, 3, 5, 1, 5, 1);
    x(50, 4, 0, 7, 5, 6, 4, 8, 0, 0, 9, 8, 4, 9, 6, 3, 8, 2, 2, 9, 1, 8, 7, 5, 9, 8, 7, 7, 8, 5, 9, 2, 1, 3,
        2, 5, 9);
    x(16, 2, 6, 4, 4, 6, 1, 8, 3, 9, 5);
    x(28, 7, 3, 6, 8, 9, 1, 1, 7, 6, 3, 6, 0, 9, 0, 3, 6, 4, 9, 8, 4, 9, 8);
    x(24, 6, 9, 5, 9, 2, 8, 0, 1, 5, 9, 1, 1, 6, 0, 1, 4, 9, 8, 1, 8, 8, 8, 0, 5, 5, 8, 9, 3, 7, 5, 2, 9);
    x(8, 8, 4);
    x(36, 7, 8, 7, 6, 8, 6, 1, 6, 4, 7, 0, 0);
    x(52, 2, 5, 8, 0, 8, 5, 2, 0, 8, 3, 4, 8, 6, 8, 6, 9, 5, 6, 9, 5, 7, 4, 6, 0, 3);
    x(21, 1, 0, 7, 1, 1, 3, 4, 3, 0, 9, 0, 8, 0, 6, 4, 5, 0, 7, 2, 1, 4, 4, 8, 9, 7, 0, 9, 1, 2, 3, 1, 2, 4,
        3, 9);
    x(10, 5, 5, 2, 8, 5);
    x(32, 3, 1, 1, 9, 8, 0, 2, 7, 8, 8, 1, 9, 9, 8, 8);
    x(8, 1, 4, 7, 1, 2);
    x(22, 1, 0, 6, 3, 3, 7, 7, 7, 2, 8, 5, 2, 8, 0, 9);
    x(24, 3, 2, 1, 1, 6, 8, 6, 8, 0, 2, 0, 5, 8, 2, 2, 7, 5, 2, 5, 3, 1, 1);
    x(21, 2, 8, 0, 2, 9, 5, 8, 1, 1, 7, 6, 4, 5, 2, 1, 5, 1, 1, 0, 9, 7, 3, 4, 3, 5, 7, 1, 4, 9, 7, 1, 3);
    x(10, 7, 5, 1, 4, 1, 5, 1, 7);
    x(18, 6, 1, 8, 5, 2, 2, 0, 0, 7, 1, 4, 2, 5, 6, 3, 3, 3, 8);
    x(20, 0, 5, 3, 4, 5, 3, 9, 0, 4, 4, 9, 3, 5, 0, 8, 0, 7, 0, 9, 5, 9, 8, 0, 7, 0);
    x(32, 9, 9, 2, 5, 8, 0, 9, 4, 6, 0, 5, 1, 1, 8, 6, 6, 2, 1, 2, 0, 5, 0, 1, 6, 7, 0, 9, 4, 4, 5, 8, 6, 9,
        4, 3);
    x(16, 4, 6, 4, 7, 1, 2, 2, 0, 0, 5, 9);
    x(28, 2, 2, 1, 8, 4, 7, 2, 3, 1, 1, 3, 9, 9, 4, 6, 6, 4, 6, 1, 3, 6);
    x(25, 4, 7, 8, 6, 5, 9, 0, 3, 9, 6, 0, 0, 9, 6, 1, 1, 8, 9, 0, 6, 5, 5, 9, 1, 2, 8, 3, 2);
    x(5, 5);
    x(24, 8, 0, 6, 0, 0, 6, 3, 1, 4, 8, 8, 6, 9, 0);
    x(21, 9, 3, 5, 1, 3, 2, 5, 4, 4, 3, 3, 6, 6, 0, 9, 7, 5, 5, 2, 4, 4, 8, 4, 7);
    x(24, 1, 8, 0, 9, 4, 4, 3, 4, 1, 7, 8, 7, 6, 2, 4, 4, 9, 7, 4, 7, 3, 1, 6, 2, 4, 2, 1, 0, 4, 3, 8);
    x(16, 9, 4, 9, 8);
    x(4, 2, 3);
    x(15, 1, 9, 2, 3, 1, 8, 4, 6, 0, 7, 5, 7);
    x(20, 3, 3, 6, 1, 4, 9, 2, 6, 7, 2, 2, 8, 3, 2, 0, 4, 1, 8, 5);
    x(60, 2, 9, 6, 3, 5, 6, 2, 9, 7, 6, 6, 8, 0, 0, 8, 0, 6, 7, 7, 9, 9, 7, 8, 7, 6, 7, 1, 4, 9);
    x(20, 7, 6, 7, 4, 8);
    x(24, 5, 0, 4, 6, 1, 3, 7, 7, 2, 9, 6, 4, 8, 6, 8);
    x(24, 0, 5, 1, 4, 4, 4, 5, 9, 9, 2, 1, 5, 0, 8, 3, 5, 2, 5, 8, 3, 0, 2);
    x(24, 8, 0, 8, 5, 5, 1, 5, 2, 1, 8, 7, 6, 4, 8, 1, 3, 7, 6, 1, 9, 7, 4, 7, 0, 8, 8, 9, 2, 4, 1, 5, 7);
    x(15, 3, 7, 0, 7, 7, 3, 8, 6);
    x(16, 2, 3, 9, 8, 0, 8, 8, 0, 7, 0, 5, 2, 4, 2, 1, 1, 9, 1);
    x(42, 6, 6, 3, 7, 3, 0, 7, 0, 4, 5, 0, 3, 4, 4, 6, 8, 3, 3, 9, 6, 8, 9, 3, 5, 4);
    x(24, 5, 2, 3, 6, 6, 6, 6, 3, 6, 0, 5, 3, 1, 4, 5, 6, 9, 4, 2, 0, 4, 1, 4, 2, 0, 2, 6, 0, 0, 1, 1, 0, 8,
        4);
    x(32, 0, 9, 2, 0, 9, 8, 9, 9, 0, 6, 0);
    x(15, 8, 4, 1, 1, 0, 3, 1, 3, 1, 2, 3, 9, 1, 7, 7, 4, 1, 1, 1, 3);
    x(27, 0, 7, 6, 9, 3, 5, 8, 3, 8, 5, 0, 2, 1, 2, 0, 9, 5, 2, 3, 7, 6, 5, 2, 6, 6, 0, 1);
    x(9, 9);
    x(16, 8, 8, 3, 3, 0, 2, 5, 3, 2, 6, 5, 5, 0, 4, 1, 0, 6, 6, 3, 8, 5, 1, 6, 4, 5, 0, 1, 1);
    x(7, 7);
    x(8, 1, 6, 4, 1, 4, 0, 3, 7);
    x(15, 0, 2, 4, 2, 7, 5, 3, 0, 1, 0, 9, 7, 3, 4, 3, 2, 1, 5);
    x(52, 5, 9, 5, 6, 9, 7, 6, 6, 7, 8, 4, 4, 7, 0, 5, 3, 8, 3, 4, 8, 3, 8, 3, 7, 7, 2, 1, 8, 2, 9);
    x(8, 3, 5, 2, 5);
    x(21, 6, 7, 9, 3, 4, 5, 7, 0, 4, 7, 4);
    x(18, 4, 3, 6, 4, 7, 0, 6, 3, 5, 3, 8, 4, 0, 2, 6, 5, 2, 4, 1, 2, 7);
    x(45, 9, 0, 8, 8, 9, 2, 9, 7, 1, 8, 2, 2, 3, 6, 8, 4, 9, 1, 7, 9, 1, 4, 2, 8, 9, 5, 9, 6, 9, 7, 8, 5, 4);
    x(24, 8, 6, 7, 7, 2, 9, 9);
    x(16, 2, 9, 1, 6, 3, 9, 8, 0, 8, 7, 3, 3, 0, 8);
    x(20, 1, 5, 1, 7, 6, 5, 8, 4, 0, 3, 9, 2, 7, 8, 0, 6, 3, 2, 3, 5, 5, 2, 1);
    x(32, 6, 2, 0, 9, 9, 7, 1, 0, 4, 1, 3, 9, 0, 4, 1, 7, 0, 8, 9, 2, 9, 1, 0, 2, 1, 7, 6, 4, 4, 4, 4, 8, 8,
        1, 2, 2);
    x(14, 4, 7, 9, 0, 1, 4, 2, 3, 5);
    x(15, 9, 2, 4, 9, 3, 4, 1, 3, 3, 0, 2, 1, 7, 6, 5, 1);
    x(42, 7, 6, 3, 0, 6, 1, 1, 7, 4, 5, 7, 9, 3, 4, 3, 9, 5, 9, 6, 6, 3, 1, 8, 3, 4, 3);
    x(25, 8, 7, 9, 3, 6, 3, 1, 0, 8, 4, 5, 0, 5, 1, 7, 7, 2, 1, 2, 7, 9, 5, 9, 7);
    x(24, 7, 3, 6, 2, 9, 9, 1, 3, 9, 0, 1, 8, 2, 1, 5, 5, 7, 0, 5, 1, 5, 7, 1, 6, 1, 2, 6, 8, 9, 6, 2, 6, 3,
        3);
    x(5, 1, 5, 2, 1, 3);
    x(24, 9, 1, 0, 2, 4, 6, 0, 9, 8, 9, 1, 9, 8, 3, 8);
    x(22, 4, 8, 1, 6, 6, 8, 3, 3, 2, 7, 6, 7, 2, 9, 0, 8, 3, 9, 3, 8, 5, 2, 7, 1, 8, 2, 0);
    x(3, 3);
  }

  private int seed = 1;

  private void rand() {
    seed++;
    var r = new Random(seed);
    var width = (int) (r.nextFloat() * r.nextFloat() * 50) + 1;
    int[] h = new int[width];
    for (int i = 0; i < width; i++)
      h[i] = r.nextInt(10);
    var area = largestRectangleArea(h);
    displayResults(area, h);
  }

  private void displayResults(int area, int[] h) {
    StringBuilder sb = new StringBuilder("x(");
    sb.append(area);
    sb.append(',');
    sb.append(spaces(7 - sb.length()));
    sb.append("/* area, heights: */ ");
    for (int x : h) {
      sb.append(',');
      sb.append(x);
    }
    sb.append(");");
    pr(sb);
  }

  private void x(int expectedArea, int... heights) {
    var answer = largestRectangleArea(heights);
    displayResults(answer, heights);
    //    pr(heights, "answer:", answer);
    if (answer != expectedArea)
      halt("expected area was", expectedArea);
  }

  private boolean withDump = true;

  private void dump(Column c, String prompt) {
    if (!withDump)
      return;
    Column head = c;
    while (head.prev != null)
      head = head.prev;

    pr(prompt);
    StringBuilder sb = new StringBuilder();

    Column w = head;
    while (w != null) {
      if (w == c)
        sb.append(">");
      else
        sb.append(" ");

      sb.append(w.height);

      sb.append("|");
      for (int x = 0; x < w.width; x++) {
        sb.append(":::: ");
      }
      sb.append("|");
      w = w.next;
    }
    pr(sb.toString());
  }

  public int largestRectangleArea(int[] heights) {

    Column c = null;
    {
      Column current = null;
      for (int h : heights) {
        Column ch = new Column(h);
        ch.height = h;

        if (current == null) {
          c = ch;
        } else {
          join(current, ch);
        }
        current = ch;
      }

      // Add a height=0 column at the end to ensure all previous columns get 'cleaned up'
      join(current, new Column(0));
    }

    int maxArea = 0;

    dump(c, "starting iteration");

    while (c.next != null) {
      var c2 = c.next;
      if (c2.height > c.height) {
        c = c2;
        dump(c, "next is higher, moved to next");
        continue;
      }

      if (c2.height == c.height) {
        c.width += c2.width;
        join(c, c2.next);
        dump(c, "next is same height, merged with it");
        continue;
      }

      int area = c.height * c.width;
      maxArea = Math.max(area, maxArea);
      int leftHeight = 0;
      if (c.prev != null)
        leftHeight = c.prev.height;
      int rightHeight = c2.height;
      c.height = Math.max(leftHeight, rightHeight);
      dump(c, "next is lower; trimmed current; added candidate area:" + area);

      // Back up, if we can, in case current has dropped at or below its previous
      if (c.prev != null) {
        c = c.prev;
        dump(c, "moved to previous");
      }
    }
    dump(c, "done; max area: " + maxArea);
    return maxArea;
  }

  private void join(Column a, Column b) {
    a.next = b;
    if (b != null)
      b.prev = a;
  }

  private static class Column {
    Column(int height) {
      this.height = height;
      this.width = 1;
    }

    int height;
    int width;
    Column prev;
    Column next;
  }
}
